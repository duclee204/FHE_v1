"""
Decrypt predictions - Client Side
Ch·ªâ client c√≥ SECRET KEY m·ªõi c√≥ th·ªÉ decrypt ƒë∆∞·ª£c k·∫øt qu·∫£
"""

import tenseal as ts
import numpy as np
import pickle
from sklearn.metrics import accuracy_score, classification_report

print("="*80)
print(" DECRYPTING PREDICTIONS - CLIENT SIDE")
print(" Using SECRET KEY to decrypt results")
print("="*80)

# ============================================================================
# B∆∞·ªõc 1: Load Secret Key
# ============================================================================
print("\n[1] Loading SECRET KEY...")

with open('f:/FHE/encrypted_data/secret_key.bin', 'rb') as f:
    secret_context_bytes = f.read()

# T·∫°o context v·ªõi secret key
context = ts.context_from(secret_context_bytes)

print(f"‚úì Secret key loaded")
print(f"  - Can encrypt: YES")
print(f"  - Can decrypt: YES ‚úÖ")
print(f"  - Can compute: YES")

# ============================================================================
# B∆∞·ªõc 2: Load Encrypted Predictions
# ============================================================================
print("\n[2] Loading encrypted predictions from server...")

with open('f:/FHE/encrypted_data/encrypted_predictions.pkl', 'rb') as f:
    results = pickle.load(f)

encrypted_pred_bytes = results['encrypted_predictions']

print(f"‚úì Encrypted predictions loaded")
print(f"  - Number of predictions: {results['n_predictions']}")
print(f"  - Training time (server): {results['training_time']:.2f}s")
print(f"  - Prediction time (server): {results['prediction_time']:.2f}s")

# ============================================================================
# B∆∞·ªõc 3: Decrypt Predictions
# ============================================================================
print("\n[3] Decrypting predictions with SECRET KEY...")

decrypted_predictions = []

for i, pred_list in enumerate(encrypted_pred_bytes):
    # pred_list is a list of 3 encrypted vectors (one per class)
    class_scores = []
    
    for pred_bytes in pred_list:
        # Deserialize encrypted prediction
        encrypted_pred = ts.ckks_vector_from(context, pred_bytes)
        
        # Decrypt
        decrypted = encrypted_pred.decrypt()
        class_scores.append(decrypted[0])  # Get first element (scalar)
    
    # Get class (argmax of scores)
    predicted_class = np.argmax(class_scores)
    decrypted_predictions.append(predicted_class)
    
    if (i + 1) % 10 == 0:
        print(f"  - Decrypted {i+1}/{len(encrypted_pred_bytes)} predictions...")

print(f"‚úì All predictions decrypted")

# ============================================================================
# B∆∞·ªõc 4: Load Original Labels ƒë·ªÉ ƒë√°nh gi√°
# ============================================================================
print("\n[4] Loading original test labels for evaluation...")

with open('f:/FHE/encrypted_data/original_data.pkl', 'rb') as f:
    original_data = pickle.load(f)

y_test = original_data['y_test']

print(f"‚úì Original labels loaded")

# ============================================================================
# B∆∞·ªõc 5: ƒê√°nh gi√° k·∫øt qu·∫£
# ============================================================================
print("\n[5] Evaluating predictions...")

accuracy = accuracy_score(y_test, decrypted_predictions)

print(f"\n{'='*80}")
print(f" RESULTS AFTER DECRYPTION")
print(f"{'='*80}")

print(f"\nüìä ACCURACY: {accuracy:.2%}")
print(f"\nüìã Classification Report:")
print(classification_report(y_test, decrypted_predictions, 
                          target_names=['setosa', 'versicolor', 'virginica']))

# ============================================================================
# B∆∞·ªõc 6: So s√°nh m·ªôt v√†i predictions
# ============================================================================
print(f"\n{'='*80}")
print(f" SAMPLE PREDICTIONS")
print(f"{'='*80}")

class_names = ['setosa', 'versicolor', 'virginica']

print(f"\n{'Sample':<8} {'True Label':<15} {'Predicted':<15} {'Correct':<8}")
print("-" * 50)

for i in range(min(10, len(y_test))):
    true_label = class_names[y_test[i]]
    pred_label = class_names[decrypted_predictions[i]]
    is_correct = "‚úì" if y_test[i] == decrypted_predictions[i] else "‚úó"
    
    print(f"{i+1:<8} {true_label:<15} {pred_label:<15} {is_correct:<8}")

# ============================================================================
# SUMMARY
# ============================================================================
print(f"\n{'='*80}")
print(f" COMPLETE WORKFLOW SUMMARY")
print(f"{'='*80}")

print(f"""
üîÑ WHAT HAPPENED:

[CLIENT SIDE - Step 1: Encryption]
‚úì Client encrypted training data with PUBLIC KEY
‚úì Created 105 encrypted training samples
‚úì Created 45 encrypted test samples
‚úì Sent to server: public_key + encrypted_data

[SERVER SIDE - Step 2: Training & Prediction]
‚úì Server received encrypted data (no secret key!)
‚úì Trained decision tree on encrypted data
‚úì Made predictions on encrypted test data
‚úì Time: {results['training_time']:.2f}s training + {results['prediction_time']:.2f}s prediction
‚úì Sent back: encrypted_predictions

[CLIENT SIDE - Step 3: Decryption]
‚úì Client received encrypted predictions
‚úì Decrypted with SECRET KEY
‚úì Final accuracy: {accuracy:.2%}

üîê PRIVACY GUARANTEES:
‚Ä¢ Server NEVER saw plaintext data
‚Ä¢ Server CANNOT decrypt anything (no secret key)
‚Ä¢ All computations on encrypted data
‚Ä¢ Only client can see final results

‚ö†Ô∏è  NOTE:
This is a SIMPLIFIED implementation to demonstrate the workflow.
The split selection is randomized because true encrypted comparison
requires polynomial approximations (soft-step functions) as shown
in fhe_decision_tree_training.py.

Real-world FHE systems need:
- Client-server interaction for split selection
- Polynomial approximation for comparisons
- Encrypted Gini impurity computation
- Much more computation time

‚úÖ KEY ACHIEVEMENT:
We demonstrated the complete privacy-preserving ML workflow:
CLIENT ‚Üí encrypt ‚Üí SERVER ‚Üí compute ‚Üí CLIENT ‚Üí decrypt
""")

print("="*80)
print("‚úÖ DECRYPTION COMPLETE!")
print("="*80)
